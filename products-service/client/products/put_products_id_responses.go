// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PutProductsIDReader is a Reader for the PutProductsID structure.
type PutProductsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutProductsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutProductsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutProductsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutProductsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutProductsIDOK creates a PutProductsIDOK with default headers values
func NewPutProductsIDOK() *PutProductsIDOK {
	return &PutProductsIDOK{}
}

/*
PutProductsIDOK describes a response with status code 200, with default header values.

OK
*/
type PutProductsIDOK struct {
	Payload string
}

// IsSuccess returns true when this put products Id o k response has a 2xx status code
func (o *PutProductsIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put products Id o k response has a 3xx status code
func (o *PutProductsIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put products Id o k response has a 4xx status code
func (o *PutProductsIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put products Id o k response has a 5xx status code
func (o *PutProductsIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put products Id o k response a status code equal to that given
func (o *PutProductsIDOK) IsCode(code int) bool {
	return code == 200
}

func (o *PutProductsIDOK) Error() string {
	return fmt.Sprintf("[PUT /products/{id}][%d] putProductsIdOK  %+v", 200, o.Payload)
}

func (o *PutProductsIDOK) String() string {
	return fmt.Sprintf("[PUT /products/{id}][%d] putProductsIdOK  %+v", 200, o.Payload)
}

func (o *PutProductsIDOK) GetPayload() string {
	return o.Payload
}

func (o *PutProductsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutProductsIDBadRequest creates a PutProductsIDBadRequest with default headers values
func NewPutProductsIDBadRequest() *PutProductsIDBadRequest {
	return &PutProductsIDBadRequest{}
}

/*
PutProductsIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PutProductsIDBadRequest struct {
	Payload string
}

// IsSuccess returns true when this put products Id bad request response has a 2xx status code
func (o *PutProductsIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put products Id bad request response has a 3xx status code
func (o *PutProductsIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put products Id bad request response has a 4xx status code
func (o *PutProductsIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put products Id bad request response has a 5xx status code
func (o *PutProductsIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put products Id bad request response a status code equal to that given
func (o *PutProductsIDBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutProductsIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /products/{id}][%d] putProductsIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutProductsIDBadRequest) String() string {
	return fmt.Sprintf("[PUT /products/{id}][%d] putProductsIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutProductsIDBadRequest) GetPayload() string {
	return o.Payload
}

func (o *PutProductsIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutProductsIDNotFound creates a PutProductsIDNotFound with default headers values
func NewPutProductsIDNotFound() *PutProductsIDNotFound {
	return &PutProductsIDNotFound{}
}

/*
PutProductsIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutProductsIDNotFound struct {
	Payload string
}

// IsSuccess returns true when this put products Id not found response has a 2xx status code
func (o *PutProductsIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put products Id not found response has a 3xx status code
func (o *PutProductsIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put products Id not found response has a 4xx status code
func (o *PutProductsIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put products Id not found response has a 5xx status code
func (o *PutProductsIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put products Id not found response a status code equal to that given
func (o *PutProductsIDNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutProductsIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /products/{id}][%d] putProductsIdNotFound  %+v", 404, o.Payload)
}

func (o *PutProductsIDNotFound) String() string {
	return fmt.Sprintf("[PUT /products/{id}][%d] putProductsIdNotFound  %+v", 404, o.Payload)
}

func (o *PutProductsIDNotFound) GetPayload() string {
	return o.Payload
}

func (o *PutProductsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
