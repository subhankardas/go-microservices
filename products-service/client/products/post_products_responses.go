// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// PostProductsReader is a Reader for the PostProducts structure.
type PostProductsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostProductsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostProductsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostProductsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostProductsOK creates a PostProductsOK with default headers values
func NewPostProductsOK() *PostProductsOK {
	return &PostProductsOK{}
}

/*
PostProductsOK describes a response with status code 200, with default header values.

OK
*/
type PostProductsOK struct {
	Payload string
}

// IsSuccess returns true when this post products o k response has a 2xx status code
func (o *PostProductsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post products o k response has a 3xx status code
func (o *PostProductsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post products o k response has a 4xx status code
func (o *PostProductsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post products o k response has a 5xx status code
func (o *PostProductsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post products o k response a status code equal to that given
func (o *PostProductsOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostProductsOK) Error() string {
	return fmt.Sprintf("[POST /products][%d] postProductsOK  %+v", 200, o.Payload)
}

func (o *PostProductsOK) String() string {
	return fmt.Sprintf("[POST /products][%d] postProductsOK  %+v", 200, o.Payload)
}

func (o *PostProductsOK) GetPayload() string {
	return o.Payload
}

func (o *PostProductsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostProductsBadRequest creates a PostProductsBadRequest with default headers values
func NewPostProductsBadRequest() *PostProductsBadRequest {
	return &PostProductsBadRequest{}
}

/*
PostProductsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostProductsBadRequest struct {
	Payload string
}

// IsSuccess returns true when this post products bad request response has a 2xx status code
func (o *PostProductsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post products bad request response has a 3xx status code
func (o *PostProductsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post products bad request response has a 4xx status code
func (o *PostProductsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post products bad request response has a 5xx status code
func (o *PostProductsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post products bad request response a status code equal to that given
func (o *PostProductsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostProductsBadRequest) Error() string {
	return fmt.Sprintf("[POST /products][%d] postProductsBadRequest  %+v", 400, o.Payload)
}

func (o *PostProductsBadRequest) String() string {
	return fmt.Sprintf("[POST /products][%d] postProductsBadRequest  %+v", 400, o.Payload)
}

func (o *PostProductsBadRequest) GetPayload() string {
	return o.Payload
}

func (o *PostProductsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
