// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/subhankardas/go-microservices/restaurant-service/data (interfaces: MenuData)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/subhankardas/go-microservices/restaurant-service/models"
)

// MockMenuData is a mock of MenuData interface.
type MockMenuData struct {
	ctrl     *gomock.Controller
	recorder *MockMenuDataMockRecorder
}

// MockMenuDataMockRecorder is the mock recorder for MockMenuData.
type MockMenuDataMockRecorder struct {
	mock *MockMenuData
}

// NewMockMenuData creates a new mock instance.
func NewMockMenuData(ctrl *gomock.Controller) *MockMenuData {
	mock := &MockMenuData{ctrl: ctrl}
	mock.recorder = &MockMenuDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMenuData) EXPECT() *MockMenuDataMockRecorder {
	return m.recorder
}

// AddMenu mocks base method.
func (m *MockMenuData) AddMenu(arg0 string, arg1 *models.Menu) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMenu", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMenu indicates an expected call of AddMenu.
func (mr *MockMenuDataMockRecorder) AddMenu(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMenu", reflect.TypeOf((*MockMenuData)(nil).AddMenu), arg0, arg1)
}

// DeleteMenu mocks base method.
func (m *MockMenuData) DeleteMenu(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMenu", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMenu indicates an expected call of DeleteMenu.
func (mr *MockMenuDataMockRecorder) DeleteMenu(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMenu", reflect.TypeOf((*MockMenuData)(nil).DeleteMenu), arg0, arg1)
}

// GetAllMenu mocks base method.
func (m *MockMenuData) GetAllMenu(arg0 string) ([]models.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMenu", arg0)
	ret0, _ := ret[0].([]models.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMenu indicates an expected call of GetAllMenu.
func (mr *MockMenuDataMockRecorder) GetAllMenu(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMenu", reflect.TypeOf((*MockMenuData)(nil).GetAllMenu), arg0)
}

// GetMenu mocks base method.
func (m *MockMenuData) GetMenu(arg0, arg1 string, arg2 *models.Menu) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenu", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetMenu indicates an expected call of GetMenu.
func (mr *MockMenuDataMockRecorder) GetMenu(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenu", reflect.TypeOf((*MockMenuData)(nil).GetMenu), arg0, arg1, arg2)
}

// UpdateMenu mocks base method.
func (m *MockMenuData) UpdateMenu(arg0 string, arg1 *models.Menu) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMenu", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMenu indicates an expected call of UpdateMenu.
func (mr *MockMenuDataMockRecorder) UpdateMenu(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMenu", reflect.TypeOf((*MockMenuData)(nil).UpdateMenu), arg0, arg1)
}
